function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy as a
%       percentage. In the app, the Models pane displays this overall
%       accuracy score for each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 10-Feb-2023 15:57:29


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'bp delta machine wake', 'bp theta machine wake', 'bp alpha machine wake', 'bp beta machine wake', 'bp gamma machine wake', 'bp broadband machine wake', 'se machine wake', 'pearson machine wake', 'xcor machine wake', 'coh delta machine wake', 'coh theta machine wake', 'coh alpha machine wake', 'coh beta machine wake', 'coh gamma machine wake', 'coh broadband machine wake', 'plv delta machine wake', 'plv theta machine wake', 'plv alpha machine wake', 'plv beta machine wake', 'plv gamma machine wake', 'plv broadband machine wake', 'll machine wake', 'bp SD theta machine wake', 'bp SD alpha machine wake', 'bp SD beta machine wake', 'bp SD gamma machine wake', 'pearson SD machine wake', 'll SD machine wake', 'plv delta car wake', 'plv theta car wake', 'plv alpha car wake', 'plv beta car wake', 'plv gamma car wake', 'plv broadband car wake', 'plv delta bipolar wake', 'plv theta bipolar wake', 'plv alpha bipolar wake', 'plv beta bipolar wake', 'plv gamma bipolar wake', 'plv broadband bipolar wake', 'spikes machine sleep', 'rl machine sleep', 'bp delta machine sleep', 'bp theta machine sleep', 'bp alpha machine sleep', 'bp beta machine sleep', 'bp gamma machine sleep', 'bp broadband machine sleep', 'se machine sleep', 'pearson machine sleep', 'xcor machine sleep', 'coh delta machine sleep', 'coh theta machine sleep', 'coh alpha machine sleep', 'coh beta machine sleep', 'coh gamma machine sleep', 'coh broadband machine sleep', 'plv delta machine sleep', 'plv theta machine sleep', 'plv alpha machine sleep', 'plv beta machine sleep', 'plv gamma machine sleep', 'plv broadband machine sleep', 'll machine sleep', 're delta machine sleep', 're theta machine sleep', 're alpha machine sleep', 'spikes SD machine sleep', 'rl SD machine sleep', 'bp SD delta machine sleep', 'bp SD theta machine sleep', 'bp SD alpha machine sleep', 'bp SD beta machine sleep', 'bp SD gamma machine sleep', 'bp SD broadband machine sleep', 'xcor SD machine sleep', 'coh SD delta machine sleep', 'coh SD theta machine sleep', 'coh SD alpha machine sleep', 'coh SD beta machine sleep', 'coh SD gamma machine sleep', 'coh SD broadband machine sleep', 'pearson SD machine sleep', 'se SD machine sleep', 'plv SD delta machine sleep', 'plv SD theta machine sleep', 'plv SD alpha machine sleep', 'plv SD beta machine sleep', 'plv SD gamma machine sleep', 'plv SD broadband machine sleep', 're SD delta machine sleep', 're SD theta machine sleep', 're SD alpha machine sleep', 'll SD machine sleep', 'spikes car sleep', 'rl car sleep', 'bp delta car sleep', 'bp theta car sleep', 'bp alpha car sleep', 'bp beta car sleep', 'bp gamma car sleep', 'bp broadband car sleep', 'se car sleep', 'pearson car sleep', 'xcor car sleep', 'coh delta car sleep', 'coh theta car sleep', 'coh alpha car sleep', 'coh beta car sleep', 'coh gamma car sleep', 'coh broadband car sleep', 'plv delta car sleep', 'plv theta car sleep', 'plv alpha car sleep', 'plv beta car sleep', 'plv gamma car sleep', 'plv broadband car sleep', 'll car sleep', 're delta car sleep', 're theta car sleep', 're alpha car sleep', 'spikes SD car sleep', 'rl SD car sleep', 'bp SD delta car sleep', 'bp SD theta car sleep', 'bp SD alpha car sleep', 'bp SD beta car sleep', 'bp SD gamma car sleep', 'bp SD broadband car sleep', 'xcor SD car sleep', 'coh SD delta car sleep', 'coh SD theta car sleep', 'coh SD alpha car sleep', 'coh SD beta car sleep', 'coh SD gamma car sleep', 'coh SD broadband car sleep', 'pearson SD car sleep', 'se SD car sleep', 'plv SD delta car sleep', 'plv SD theta car sleep', 'plv SD alpha car sleep', 'plv SD beta car sleep', 'plv SD gamma car sleep', 'plv SD broadband car sleep', 're SD delta car sleep', 're SD theta car sleep', 're SD alpha car sleep', 'll SD car sleep', 'spikes bipolar sleep', 'rl bipolar sleep', 'bp delta bipolar sleep', 'bp theta bipolar sleep', 'bp alpha bipolar sleep', 'bp beta bipolar sleep', 'bp gamma bipolar sleep', 'bp broadband bipolar sleep', 'se bipolar sleep', 'pearson bipolar sleep', 'xcor bipolar sleep', 'coh delta bipolar sleep', 'coh theta bipolar sleep', 'coh alpha bipolar sleep', 'coh beta bipolar sleep', 'coh gamma bipolar sleep', 'coh broadband bipolar sleep', 'plv delta bipolar sleep', 'plv theta bipolar sleep', 'plv alpha bipolar sleep', 'plv beta bipolar sleep', 'plv gamma bipolar sleep', 'plv broadband bipolar sleep', 'll bipolar sleep', 're delta bipolar sleep', 're theta bipolar sleep', 're alpha bipolar sleep', 'spikes SD bipolar sleep', 'rl SD bipolar sleep', 'bp SD delta bipolar sleep', 'bp SD theta bipolar sleep', 'bp SD alpha bipolar sleep', 'bp SD beta bipolar sleep', 'bp SD gamma bipolar sleep', 'bp SD broadband bipolar sleep', 'xcor SD bipolar sleep', 'coh SD delta bipolar sleep', 'coh SD theta bipolar sleep', 'coh SD alpha bipolar sleep', 'coh SD beta bipolar sleep', 'coh SD gamma bipolar sleep', 'coh SD broadband bipolar sleep', 'pearson SD bipolar sleep', 'se SD bipolar sleep', 'plv SD delta bipolar sleep', 'plv SD theta bipolar sleep', 'plv SD alpha bipolar sleep', 'plv SD beta bipolar sleep', 'plv SD gamma bipolar sleep', 'plv SD broadband bipolar sleep', 're SD delta bipolar sleep', 're SD theta bipolar sleep', 're SD alpha bipolar sleep', 'll SD bipolar sleep'};
predictors = inputTable(:, predictorNames);
response = inputTable.br_soz_lats;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
% For logistic regression, the response values must be converted to zeros
% and ones because the responses are assumed to follow a binomial
% distribution.
% 1 or true = 'successful' class
% 0 or false = 'failure' class
% NaN - missing response.
successClass = 'br';
failureClass = 'left';
% Compute the majority response class. If there is a NaN-prediction from
% fitglm, convert NaN to this majority class label.
numSuccess = sum(strcmp(strtrim(response), successClass));
numFailure = sum(strcmp(strtrim(response), failureClass));
if numSuccess > numFailure
    missingClass = successClass;
else
    missingClass = failureClass;
end
successFailureAndMissingClasses = {successClass; failureClass; missingClass};
isMissing = cellfun(@(x) isempty(strtrim(x)), response);
zeroOneResponse = double(strcmp(strtrim(response), successClass));
zeroOneResponse(isMissing) = NaN;
% Prepare input arguments to fitglm.
concatenatedPredictorsAndResponse = [predictors, table(zeroOneResponse)];
% Train using fitglm.
GeneralizedLinearModel = fitglm(...
    concatenatedPredictorsAndResponse, ...
    'Distribution', 'binomial', ...
    'link', 'logit');

% Convert predicted probabilities to predicted class labels and scores.
convertSuccessProbsToPredictions = @(p) successFailureAndMissingClasses( ~isnan(p).*( (p<0.5) + 1 ) + isnan(p)*3 );
returnMultipleValuesFcn = @(varargin) varargin{1:max(1,nargout)};
scoresFcn = @(p) [p, 1-p];
predictionsAndScoresFcn = @(p) returnMultipleValuesFcn( convertSuccessProbsToPredictions(p), scoresFcn(p) );

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
logisticRegressionPredictFcn = @(x) predictionsAndScoresFcn( predict(GeneralizedLinearModel, x) );
trainedClassifier.predictFcn = @(x) logisticRegressionPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'bp SD alpha bipolar sleep', 'bp SD alpha car sleep', 'bp SD alpha machine sleep', 'bp SD alpha machine wake', 'bp SD beta bipolar sleep', 'bp SD beta car sleep', 'bp SD beta machine sleep', 'bp SD beta machine wake', 'bp SD broadband bipolar sleep', 'bp SD broadband car sleep', 'bp SD broadband machine sleep', 'bp SD delta bipolar sleep', 'bp SD delta car sleep', 'bp SD delta machine sleep', 'bp SD gamma bipolar sleep', 'bp SD gamma car sleep', 'bp SD gamma machine sleep', 'bp SD gamma machine wake', 'bp SD theta bipolar sleep', 'bp SD theta car sleep', 'bp SD theta machine sleep', 'bp SD theta machine wake', 'bp alpha bipolar sleep', 'bp alpha car sleep', 'bp alpha machine sleep', 'bp alpha machine wake', 'bp beta bipolar sleep', 'bp beta car sleep', 'bp beta machine sleep', 'bp beta machine wake', 'bp broadband bipolar sleep', 'bp broadband car sleep', 'bp broadband machine sleep', 'bp broadband machine wake', 'bp delta bipolar sleep', 'bp delta car sleep', 'bp delta machine sleep', 'bp delta machine wake', 'bp gamma bipolar sleep', 'bp gamma car sleep', 'bp gamma machine sleep', 'bp gamma machine wake', 'bp theta bipolar sleep', 'bp theta car sleep', 'bp theta machine sleep', 'bp theta machine wake', 'coh SD alpha bipolar sleep', 'coh SD alpha car sleep', 'coh SD alpha machine sleep', 'coh SD beta bipolar sleep', 'coh SD beta car sleep', 'coh SD beta machine sleep', 'coh SD broadband bipolar sleep', 'coh SD broadband car sleep', 'coh SD broadband machine sleep', 'coh SD delta bipolar sleep', 'coh SD delta car sleep', 'coh SD delta machine sleep', 'coh SD gamma bipolar sleep', 'coh SD gamma car sleep', 'coh SD gamma machine sleep', 'coh SD theta bipolar sleep', 'coh SD theta car sleep', 'coh SD theta machine sleep', 'coh alpha bipolar sleep', 'coh alpha car sleep', 'coh alpha machine sleep', 'coh alpha machine wake', 'coh beta bipolar sleep', 'coh beta car sleep', 'coh beta machine sleep', 'coh beta machine wake', 'coh broadband bipolar sleep', 'coh broadband car sleep', 'coh broadband machine sleep', 'coh broadband machine wake', 'coh delta bipolar sleep', 'coh delta car sleep', 'coh delta machine sleep', 'coh delta machine wake', 'coh gamma bipolar sleep', 'coh gamma car sleep', 'coh gamma machine sleep', 'coh gamma machine wake', 'coh theta bipolar sleep', 'coh theta car sleep', 'coh theta machine sleep', 'coh theta machine wake', 'll SD bipolar sleep', 'll SD car sleep', 'll SD machine sleep', 'll SD machine wake', 'll bipolar sleep', 'll car sleep', 'll machine sleep', 'll machine wake', 'pearson SD bipolar sleep', 'pearson SD car sleep', 'pearson SD machine sleep', 'pearson SD machine wake', 'pearson bipolar sleep', 'pearson car sleep', 'pearson machine sleep', 'pearson machine wake', 'plv SD alpha bipolar sleep', 'plv SD alpha car sleep', 'plv SD alpha machine sleep', 'plv SD beta bipolar sleep', 'plv SD beta car sleep', 'plv SD beta machine sleep', 'plv SD broadband bipolar sleep', 'plv SD broadband car sleep', 'plv SD broadband machine sleep', 'plv SD delta bipolar sleep', 'plv SD delta car sleep', 'plv SD delta machine sleep', 'plv SD gamma bipolar sleep', 'plv SD gamma car sleep', 'plv SD gamma machine sleep', 'plv SD theta bipolar sleep', 'plv SD theta car sleep', 'plv SD theta machine sleep', 'plv alpha bipolar sleep', 'plv alpha bipolar wake', 'plv alpha car sleep', 'plv alpha car wake', 'plv alpha machine sleep', 'plv alpha machine wake', 'plv beta bipolar sleep', 'plv beta bipolar wake', 'plv beta car sleep', 'plv beta car wake', 'plv beta machine sleep', 'plv beta machine wake', 'plv broadband bipolar sleep', 'plv broadband bipolar wake', 'plv broadband car sleep', 'plv broadband car wake', 'plv broadband machine sleep', 'plv broadband machine wake', 'plv delta bipolar sleep', 'plv delta bipolar wake', 'plv delta car sleep', 'plv delta car wake', 'plv delta machine sleep', 'plv delta machine wake', 'plv gamma bipolar sleep', 'plv gamma bipolar wake', 'plv gamma car sleep', 'plv gamma car wake', 'plv gamma machine sleep', 'plv gamma machine wake', 'plv theta bipolar sleep', 'plv theta bipolar wake', 'plv theta car sleep', 'plv theta car wake', 'plv theta machine sleep', 'plv theta machine wake', 're SD alpha bipolar sleep', 're SD alpha car sleep', 're SD alpha machine sleep', 're SD delta bipolar sleep', 're SD delta car sleep', 're SD delta machine sleep', 're SD theta bipolar sleep', 're SD theta car sleep', 're SD theta machine sleep', 're alpha bipolar sleep', 're alpha car sleep', 're alpha machine sleep', 're delta bipolar sleep', 're delta car sleep', 're delta machine sleep', 're theta bipolar sleep', 're theta car sleep', 're theta machine sleep', 'rl SD bipolar sleep', 'rl SD car sleep', 'rl SD machine sleep', 'rl bipolar sleep', 'rl car sleep', 'rl machine sleep', 'se SD bipolar sleep', 'se SD car sleep', 'se SD machine sleep', 'se bipolar sleep', 'se car sleep', 'se machine sleep', 'se machine wake', 'spikes SD bipolar sleep', 'spikes SD car sleep', 'spikes SD machine sleep', 'spikes bipolar sleep', 'spikes car sleep', 'spikes machine sleep', 'xcor SD bipolar sleep', 'xcor SD car sleep', 'xcor SD machine sleep', 'xcor bipolar sleep', 'xcor car sleep', 'xcor machine sleep', 'xcor machine wake'};
trainedClassifier.GeneralizedLinearModel = GeneralizedLinearModel;
trainedClassifier.SuccessClass = successClass;
trainedClassifier.FailureClass = failureClass;
trainedClassifier.MissingClass = missingClass;
trainedClassifier.ClassNames = {successClass; failureClass};
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2022a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'bp delta machine wake', 'bp theta machine wake', 'bp alpha machine wake', 'bp beta machine wake', 'bp gamma machine wake', 'bp broadband machine wake', 'se machine wake', 'pearson machine wake', 'xcor machine wake', 'coh delta machine wake', 'coh theta machine wake', 'coh alpha machine wake', 'coh beta machine wake', 'coh gamma machine wake', 'coh broadband machine wake', 'plv delta machine wake', 'plv theta machine wake', 'plv alpha machine wake', 'plv beta machine wake', 'plv gamma machine wake', 'plv broadband machine wake', 'll machine wake', 'bp SD theta machine wake', 'bp SD alpha machine wake', 'bp SD beta machine wake', 'bp SD gamma machine wake', 'pearson SD machine wake', 'll SD machine wake', 'plv delta car wake', 'plv theta car wake', 'plv alpha car wake', 'plv beta car wake', 'plv gamma car wake', 'plv broadband car wake', 'plv delta bipolar wake', 'plv theta bipolar wake', 'plv alpha bipolar wake', 'plv beta bipolar wake', 'plv gamma bipolar wake', 'plv broadband bipolar wake', 'spikes machine sleep', 'rl machine sleep', 'bp delta machine sleep', 'bp theta machine sleep', 'bp alpha machine sleep', 'bp beta machine sleep', 'bp gamma machine sleep', 'bp broadband machine sleep', 'se machine sleep', 'pearson machine sleep', 'xcor machine sleep', 'coh delta machine sleep', 'coh theta machine sleep', 'coh alpha machine sleep', 'coh beta machine sleep', 'coh gamma machine sleep', 'coh broadband machine sleep', 'plv delta machine sleep', 'plv theta machine sleep', 'plv alpha machine sleep', 'plv beta machine sleep', 'plv gamma machine sleep', 'plv broadband machine sleep', 'll machine sleep', 're delta machine sleep', 're theta machine sleep', 're alpha machine sleep', 'spikes SD machine sleep', 'rl SD machine sleep', 'bp SD delta machine sleep', 'bp SD theta machine sleep', 'bp SD alpha machine sleep', 'bp SD beta machine sleep', 'bp SD gamma machine sleep', 'bp SD broadband machine sleep', 'xcor SD machine sleep', 'coh SD delta machine sleep', 'coh SD theta machine sleep', 'coh SD alpha machine sleep', 'coh SD beta machine sleep', 'coh SD gamma machine sleep', 'coh SD broadband machine sleep', 'pearson SD machine sleep', 'se SD machine sleep', 'plv SD delta machine sleep', 'plv SD theta machine sleep', 'plv SD alpha machine sleep', 'plv SD beta machine sleep', 'plv SD gamma machine sleep', 'plv SD broadband machine sleep', 're SD delta machine sleep', 're SD theta machine sleep', 're SD alpha machine sleep', 'll SD machine sleep', 'spikes car sleep', 'rl car sleep', 'bp delta car sleep', 'bp theta car sleep', 'bp alpha car sleep', 'bp beta car sleep', 'bp gamma car sleep', 'bp broadband car sleep', 'se car sleep', 'pearson car sleep', 'xcor car sleep', 'coh delta car sleep', 'coh theta car sleep', 'coh alpha car sleep', 'coh beta car sleep', 'coh gamma car sleep', 'coh broadband car sleep', 'plv delta car sleep', 'plv theta car sleep', 'plv alpha car sleep', 'plv beta car sleep', 'plv gamma car sleep', 'plv broadband car sleep', 'll car sleep', 're delta car sleep', 're theta car sleep', 're alpha car sleep', 'spikes SD car sleep', 'rl SD car sleep', 'bp SD delta car sleep', 'bp SD theta car sleep', 'bp SD alpha car sleep', 'bp SD beta car sleep', 'bp SD gamma car sleep', 'bp SD broadband car sleep', 'xcor SD car sleep', 'coh SD delta car sleep', 'coh SD theta car sleep', 'coh SD alpha car sleep', 'coh SD beta car sleep', 'coh SD gamma car sleep', 'coh SD broadband car sleep', 'pearson SD car sleep', 'se SD car sleep', 'plv SD delta car sleep', 'plv SD theta car sleep', 'plv SD alpha car sleep', 'plv SD beta car sleep', 'plv SD gamma car sleep', 'plv SD broadband car sleep', 're SD delta car sleep', 're SD theta car sleep', 're SD alpha car sleep', 'll SD car sleep', 'spikes bipolar sleep', 'rl bipolar sleep', 'bp delta bipolar sleep', 'bp theta bipolar sleep', 'bp alpha bipolar sleep', 'bp beta bipolar sleep', 'bp gamma bipolar sleep', 'bp broadband bipolar sleep', 'se bipolar sleep', 'pearson bipolar sleep', 'xcor bipolar sleep', 'coh delta bipolar sleep', 'coh theta bipolar sleep', 'coh alpha bipolar sleep', 'coh beta bipolar sleep', 'coh gamma bipolar sleep', 'coh broadband bipolar sleep', 'plv delta bipolar sleep', 'plv theta bipolar sleep', 'plv alpha bipolar sleep', 'plv beta bipolar sleep', 'plv gamma bipolar sleep', 'plv broadband bipolar sleep', 'll bipolar sleep', 're delta bipolar sleep', 're theta bipolar sleep', 're alpha bipolar sleep', 'spikes SD bipolar sleep', 'rl SD bipolar sleep', 'bp SD delta bipolar sleep', 'bp SD theta bipolar sleep', 'bp SD alpha bipolar sleep', 'bp SD beta bipolar sleep', 'bp SD gamma bipolar sleep', 'bp SD broadband bipolar sleep', 'xcor SD bipolar sleep', 'coh SD delta bipolar sleep', 'coh SD theta bipolar sleep', 'coh SD alpha bipolar sleep', 'coh SD beta bipolar sleep', 'coh SD gamma bipolar sleep', 'coh SD broadband bipolar sleep', 'pearson SD bipolar sleep', 'se SD bipolar sleep', 'plv SD delta bipolar sleep', 'plv SD theta bipolar sleep', 'plv SD alpha bipolar sleep', 'plv SD beta bipolar sleep', 'plv SD gamma bipolar sleep', 'plv SD broadband bipolar sleep', 're SD delta bipolar sleep', 're SD theta bipolar sleep', 're SD alpha bipolar sleep', 'll SD bipolar sleep'};
predictors = inputTable(:, predictorNames);
response = inputTable.br_soz_lats;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
KFolds = 5;
cvp = cvpartition(response, 'KFold', KFolds);
% Initialize the predictions to the proper sizes
validationPredictions = response;
numObservations = size(predictors, 1);
numClasses = 2;
validationScores = NaN(numObservations, numClasses);
for fold = 1:KFolds
    trainingPredictors = predictors(cvp.training(fold), :);
    trainingResponse = response(cvp.training(fold), :);
    foldIsCategoricalPredictor = isCategoricalPredictor;

    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    % For logistic regression, the response values must be converted to zeros
    % and ones because the responses are assumed to follow a binomial
    % distribution.
    % 1 or true = 'successful' class
    % 0 or false = 'failure' class
    % NaN - missing response.
    successClass = 'br';
    failureClass = 'left';
    % Compute the majority response class. If there is a NaN-prediction from
    % fitglm, convert NaN to this majority class label.
    numSuccess = sum(strcmp(strtrim(trainingResponse), successClass));
    numFailure = sum(strcmp(strtrim(trainingResponse), failureClass));
    if numSuccess > numFailure
        missingClass = successClass;
    else
        missingClass = failureClass;
    end
    successFailureAndMissingClasses = {successClass; failureClass; missingClass};
    isMissing = cellfun(@(x) isempty(strtrim(x)), trainingResponse);
    zeroOneResponse = double(strcmp(strtrim(trainingResponse), successClass));
    zeroOneResponse(isMissing) = NaN;
    % Prepare input arguments to fitglm.
    concatenatedPredictorsAndResponse = [trainingPredictors, table(zeroOneResponse)];
    % Train using fitglm.
    GeneralizedLinearModel = fitglm(...
        concatenatedPredictorsAndResponse, ...
        'Distribution', 'binomial', ...
        'link', 'logit');

    % Convert predicted probabilities to predicted class labels and scores.
    convertSuccessProbsToPredictions = @(p) successFailureAndMissingClasses( ~isnan(p).*( (p<0.5) + 1 ) + isnan(p)*3 );
    returnMultipleValuesFcn = @(varargin) varargin{1:max(1,nargout)};
    scoresFcn = @(p) [p, 1-p];
    predictionsAndScoresFcn = @(p) returnMultipleValuesFcn( convertSuccessProbsToPredictions(p), scoresFcn(p) );

    % Create the result struct with predict function
    logisticRegressionPredictFcn = @(x) predictionsAndScoresFcn( predict(GeneralizedLinearModel, x) );
    validationPredictFcn = @(x) logisticRegressionPredictFcn(x);

    % Add additional fields to the result struct

    % Compute validation predictions
    validationPredictors = predictors(cvp.test(fold), :);
    [foldPredictions, foldScores] = validationPredictFcn(validationPredictors);

    % Store predictions in the original order
    validationPredictions(cvp.test(fold), :) = foldPredictions;
    validationScores(cvp.test(fold), :) = foldScores;
end

% Compute validation accuracy
correctPredictions = strcmp( strtrim(validationPredictions), strtrim(response));
isMissing = cellfun(@(x) all(isspace(x)), response, 'UniformOutput', true);
correctPredictions = correctPredictions(~isMissing);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
